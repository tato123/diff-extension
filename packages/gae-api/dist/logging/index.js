"use strict";

// Copyright 2017, Google, Inc.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
const winston = require('winston');

const expressWinston = require('express-winston');

const StackdriverTransport = require('@google-cloud/logging-winston').LoggingWinston;

const colorize = process.env.NODE_ENV !== 'production'; // Logger to capture all requests and output them to the console.
// [START requests]

const requestLogger = expressWinston.logger({
  transports: [new StackdriverTransport(), new winston.transports.Console({
    json: false,
    colorize
  })],
  expressFormat: true,
  meta: false
}); // [END requests]
// Logger to capture any top-level errors and output json diagnostic info.
// [START errors]

const errorLogger = expressWinston.errorLogger({
  transports: [new StackdriverTransport(), new winston.transports.Console({
    json: true,
    colorize
  })]
}); // [END errors]

const logger = winston.createLogger({
  level: 'debug',
  format: winston.format.json(),
  transports: [new winston.transports.Console({
    json: true,
    colorize: true,
    format: winston.format.simple()
  })],
  meta: true
});
module.exports = {
  requestLogger,
  errorLogger,
  error: logger.error,
  warn: logger.warn,
  info: logger.info,
  log: logger.log,
  verbose: logger.verbose,
  debug: logger.debug,
  silly: logger.silly
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnaW5nL2luZGV4LmpzIl0sIm5hbWVzIjpbIndpbnN0b24iLCJyZXF1aXJlIiwiZXhwcmVzc1dpbnN0b24iLCJTdGFja2RyaXZlclRyYW5zcG9ydCIsIkxvZ2dpbmdXaW5zdG9uIiwiY29sb3JpemUiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJyZXF1ZXN0TG9nZ2VyIiwibG9nZ2VyIiwidHJhbnNwb3J0cyIsIkNvbnNvbGUiLCJqc29uIiwiZXhwcmVzc0Zvcm1hdCIsIm1ldGEiLCJlcnJvckxvZ2dlciIsImNyZWF0ZUxvZ2dlciIsImxldmVsIiwiZm9ybWF0Iiwic2ltcGxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImVycm9yIiwid2FybiIsImluZm8iLCJsb2ciLCJ2ZXJib3NlIiwiZGVidWciLCJzaWxseSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1DLGNBQWMsR0FBR0QsT0FBTyxDQUFDLGlCQUFELENBQTlCOztBQUNBLE1BQU1FLG9CQUFvQixHQUFHRixPQUFPLENBQUMsK0JBQUQsQ0FBUCxDQUMxQkcsY0FESDs7QUFHQSxNQUFNQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTFDLEMsQ0FFQTtBQUNBOztBQUNBLE1BQU1DLGFBQWEsR0FBR1AsY0FBYyxDQUFDUSxNQUFmLENBQXNCO0FBQzFDQyxFQUFBQSxVQUFVLEVBQUUsQ0FDVixJQUFJUixvQkFBSixFQURVLEVBRVYsSUFBSUgsT0FBTyxDQUFDVyxVQUFSLENBQW1CQyxPQUF2QixDQUErQjtBQUM3QkMsSUFBQUEsSUFBSSxFQUFFLEtBRHVCO0FBRTdCUixJQUFBQTtBQUY2QixHQUEvQixDQUZVLENBRDhCO0FBUTFDUyxFQUFBQSxhQUFhLEVBQUUsSUFSMkI7QUFTMUNDLEVBQUFBLElBQUksRUFBRTtBQVRvQyxDQUF0QixDQUF0QixDLENBV0E7QUFFQTtBQUNBOztBQUNBLE1BQU1DLFdBQVcsR0FBR2QsY0FBYyxDQUFDYyxXQUFmLENBQTJCO0FBQzdDTCxFQUFBQSxVQUFVLEVBQUUsQ0FDVixJQUFJUixvQkFBSixFQURVLEVBRVYsSUFBSUgsT0FBTyxDQUFDVyxVQUFSLENBQW1CQyxPQUF2QixDQUErQjtBQUM3QkMsSUFBQUEsSUFBSSxFQUFFLElBRHVCO0FBRTdCUixJQUFBQTtBQUY2QixHQUEvQixDQUZVO0FBRGlDLENBQTNCLENBQXBCLEMsQ0FTQTs7QUFFQSxNQUFNSyxNQUFNLEdBQUdWLE9BQU8sQ0FBQ2lCLFlBQVIsQ0FBcUI7QUFDbENDLEVBQUFBLEtBQUssRUFBRSxPQUQyQjtBQUVsQ0MsRUFBQUEsTUFBTSxFQUFFbkIsT0FBTyxDQUFDbUIsTUFBUixDQUFlTixJQUFmLEVBRjBCO0FBR2xDRixFQUFBQSxVQUFVLEVBQUUsQ0FDVixJQUFJWCxPQUFPLENBQUNXLFVBQVIsQ0FBbUJDLE9BQXZCLENBQStCO0FBQzdCQyxJQUFBQSxJQUFJLEVBQUUsSUFEdUI7QUFFN0JSLElBQUFBLFFBQVEsRUFBRSxJQUZtQjtBQUc3QmMsSUFBQUEsTUFBTSxFQUFFbkIsT0FBTyxDQUFDbUIsTUFBUixDQUFlQyxNQUFmO0FBSHFCLEdBQS9CLENBRFUsQ0FIc0I7QUFVbENMLEVBQUFBLElBQUksRUFBRTtBQVY0QixDQUFyQixDQUFmO0FBYUFNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmYixFQUFBQSxhQURlO0FBRWZPLEVBQUFBLFdBRmU7QUFHZk8sRUFBQUEsS0FBSyxFQUFFYixNQUFNLENBQUNhLEtBSEM7QUFJZkMsRUFBQUEsSUFBSSxFQUFFZCxNQUFNLENBQUNjLElBSkU7QUFLZkMsRUFBQUEsSUFBSSxFQUFFZixNQUFNLENBQUNlLElBTEU7QUFNZkMsRUFBQUEsR0FBRyxFQUFFaEIsTUFBTSxDQUFDZ0IsR0FORztBQU9mQyxFQUFBQSxPQUFPLEVBQUVqQixNQUFNLENBQUNpQixPQVBEO0FBUWZDLEVBQUFBLEtBQUssRUFBRWxCLE1BQU0sQ0FBQ2tCLEtBUkM7QUFTZkMsRUFBQUEsS0FBSyxFQUFFbkIsTUFBTSxDQUFDbUI7QUFUQyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LCBHb29nbGUsIEluYy5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSgnd2luc3RvbicpO1xuY29uc3QgZXhwcmVzc1dpbnN0b24gPSByZXF1aXJlKCdleHByZXNzLXdpbnN0b24nKTtcbmNvbnN0IFN0YWNrZHJpdmVyVHJhbnNwb3J0ID0gcmVxdWlyZSgnQGdvb2dsZS1jbG91ZC9sb2dnaW5nLXdpbnN0b24nKVxuICAuTG9nZ2luZ1dpbnN0b247XG5cbmNvbnN0IGNvbG9yaXplID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxuLy8gTG9nZ2VyIHRvIGNhcHR1cmUgYWxsIHJlcXVlc3RzIGFuZCBvdXRwdXQgdGhlbSB0byB0aGUgY29uc29sZS5cbi8vIFtTVEFSVCByZXF1ZXN0c11cbmNvbnN0IHJlcXVlc3RMb2dnZXIgPSBleHByZXNzV2luc3Rvbi5sb2dnZXIoe1xuICB0cmFuc3BvcnRzOiBbXG4gICAgbmV3IFN0YWNrZHJpdmVyVHJhbnNwb3J0KCksXG4gICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKHtcbiAgICAgIGpzb246IGZhbHNlLFxuICAgICAgY29sb3JpemVcbiAgICB9KVxuICBdLFxuICBleHByZXNzRm9ybWF0OiB0cnVlLFxuICBtZXRhOiBmYWxzZVxufSk7XG4vLyBbRU5EIHJlcXVlc3RzXVxuXG4vLyBMb2dnZXIgdG8gY2FwdHVyZSBhbnkgdG9wLWxldmVsIGVycm9ycyBhbmQgb3V0cHV0IGpzb24gZGlhZ25vc3RpYyBpbmZvLlxuLy8gW1NUQVJUIGVycm9yc11cbmNvbnN0IGVycm9yTG9nZ2VyID0gZXhwcmVzc1dpbnN0b24uZXJyb3JMb2dnZXIoe1xuICB0cmFuc3BvcnRzOiBbXG4gICAgbmV3IFN0YWNrZHJpdmVyVHJhbnNwb3J0KCksXG4gICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKHtcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBjb2xvcml6ZVxuICAgIH0pXG4gIF1cbn0pO1xuLy8gW0VORCBlcnJvcnNdXG5cbmNvbnN0IGxvZ2dlciA9IHdpbnN0b24uY3JlYXRlTG9nZ2VyKHtcbiAgbGV2ZWw6ICdkZWJ1ZycsXG4gIGZvcm1hdDogd2luc3Rvbi5mb3JtYXQuanNvbigpLFxuICB0cmFuc3BvcnRzOiBbXG4gICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKHtcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBjb2xvcml6ZTogdHJ1ZSxcbiAgICAgIGZvcm1hdDogd2luc3Rvbi5mb3JtYXQuc2ltcGxlKClcbiAgICB9KVxuICBdLFxuICBtZXRhOiB0cnVlXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlcXVlc3RMb2dnZXIsXG4gIGVycm9yTG9nZ2VyLFxuICBlcnJvcjogbG9nZ2VyLmVycm9yLFxuICB3YXJuOiBsb2dnZXIud2FybixcbiAgaW5mbzogbG9nZ2VyLmluZm8sXG4gIGxvZzogbG9nZ2VyLmxvZyxcbiAgdmVyYm9zZTogbG9nZ2VyLnZlcmJvc2UsXG4gIGRlYnVnOiBsb2dnZXIuZGVidWcsXG4gIHNpbGx5OiBsb2dnZXIuc2lsbHlcbn07XG4iXX0=