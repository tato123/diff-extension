"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _querystring = _interopRequireDefault(require("querystring"));

var _lodash = _interopRequireDefault(require("lodash"));

var emailNotify = _interopRequireWildcard(require("./email"));

var _workspace = _interopRequireDefault(require("./workspace"));

var _firestore = require("../../firestore");

var _logging = _interopRequireDefault(require("../../logging"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const retrieveClaimsForUid = async uid => {
  const claims = {};
  return claims;
};

const createAndStoreRefreshToken = async uid => {
  const token = `${_crypto.default.randomBytes(15).toString('hex')}`;
  await _firestore.db.collection('refreshToken').doc(uid).set({
    uid,
    token,
    created: _firestore.admin.firestore.FieldValue.serverTimestamp()
  });
  return token;
};

const createTokenForUid = async (uid, offlineScope = false) => {
  const claims = await retrieveClaimsForUid(uid);
  const access_token = await _firestore.admin.auth().createCustomToken(uid, claims);
  const customToken = {
    access_token
  };

  if (offlineScope) {
    const refresh_token = await createAndStoreRefreshToken(uid);
    Object.assign(customToken, {
      refresh_token
    });
  }

  return customToken;
};

const restoreTokenForUid = async (uid, refresh_token) => {
  const customToken = await createTokenForUid(uid);
  return Object.assign({}, customToken, {
    refresh_token
  });
};
/**
 * Creates a basic user record`
 * @param {String} user
 * @returns {Promise}
 */


const initializeUser = user => _firestore.db.collection('users').doc(user.uid).set({
  displayName: user.displayName,
  photoUrl: null,
  uid: user.uid,
  email: user.email,
  verified: false
});

const basicAuthentication = (req, res) => {
  const token = req.headers.authorization.split(' ')[1];

  _logging.default.info('Basic Token', token);

  const buf = Buffer.from(token, 'base64');
  const [username, password] = buf.toString().split(':');
  const offlineScope = true;

  _logging.default.info('Attempting to perform basic authentication', username);

  _firestore.admin.auth().signInWithEmailAndPassword(username, password).then(credential => {
    _logging.default.info('User signed in', username);

    const {
      user
    } = credential;
    return createTokenForUid(user.uid, offlineScope);
  }).then(customToken => {
    res.send(200, customToken);
  }).catch(error => {
    res.send(401, {
      err: error.message
    });
  });
};

const tokenAuthentication = async (req, res) => {
  try {
    // As an admin, the app has access to read and write all data, regardless of Security Rules
    const token = _querystring.default.parse(req.body).refresh_token;

    const snapshot = await _firestore.db.collection('refreshToken').where('token', '==', token).limit(1).get();

    if (snapshot.docs.length > 0) {
      const {
        uid
      } = snapshot.docs[0].data();
      const customToken = await restoreTokenForUid(uid, token);
      return res.send(200, customToken);
    }

    return res.send(401, {
      err: 'Invalid refresh token'
    });
  } catch (error) {
    return res.send(401, {
      err: error.message
    });
  }
};

const autoAcceptWorkspaceInvites = async (email, uid) => {
  const querySnapshot = await _firestore.db.collection('invites').where('email', '==', email).where('status', '==', 'pending').get(); // we have pending invites

  if (!querySnapshot.empty) {
    querySnapshot.forEach(async inviteDoc => {
      // 1. get our invite
      const invite = inviteDoc.data();
      const workspaceId = invite.workspaceId; // 2. get our workspace

      const workspaceDoc = await _firestore.db.collection('workspace').doc(workspaceId).get();
      const workspace = workspaceDoc.data(); // 3. add our user to the workspace

      workspace.users[uid] = true;
      workspaceDoc.ref.update(workspace); // 4. Change our invite status

      invite.status = 'accept.review';
      inviteDoc.ref.update(invite); // 5. send an email

      emailNotify.autoAcceptWorkspaceInvites(invite.email, workspace.name);
    });
  }

  return uid;
};

const signupUser = (email, password, displayName) => {
  const offlineScope = true;
  return _firestore.admin.auth().createUser({
    email,
    password,
    displayName
  }).then(credential => initializeUser(credential).then(() => credential.uid)).then(uid => autoAcceptWorkspaceInvites(email, uid)).then(uid => createTokenForUid(uid, offlineScope));
};

const isUser = async email => {
  const querySnapshot = await _firestore.db.collection('users').where('email', '==', email).limit(1).get();
  return !querySnapshot.empty;
};

const bearerToUid = async authorizationBearer => {
  if (!_lodash.default.isNil(authorizationBearer) && authorizationBearer.toLowerCase().startsWith('bearer')) {
    const idToken = authorizationBearer.split(' ')[1];
    return _firestore.admin.auth().verifyIdToken(idToken).then(decodedToken => decodedToken.uid);
  }

  return null;
};

const inviteUsers = async (emails, workspaceId, creatorUid) => {
  const workspaceDoc = await _firestore.db.collection('workspace').doc(workspaceId).get();

  if (!workspaceDoc.exists) {
    throw new Error('workspace does not exist');
  }

  const workspaceRecord = workspaceDoc.data();
  return Promise.all(emails.map(async email => {
    // check if we already have an invite for this user and workspace id
    const inviteEmailToWorkspaceRef = await _firestore.db.collection('invites').where('email', '==', email).where('workspaceId', '==', workspaceId).get();

    if (!inviteEmailToWorkspaceRef.empty) {
      _logging.default.info(`[Already invited to workspace] ${creatorUid} - Attempted to invite user [${email}] to ${workspaceId}`);

      return;
    } // check if we have a user for this email


    const userQuerySnapshot = await _firestore.db.collection('users').where('email', '==', email).limit(1).get();
    const userExists = !userQuerySnapshot.empty; // create a new invite for this user

    const invite = {
      email,
      workspaceId,
      created: _firestore.admin.firestore.FieldValue.serverTimestamp(),
      status: userExists ? 'accept.review' : 'pending',
      invitedBy: creatorUid
    };
    await _firestore.db.collection('invites').doc().set(invite);

    if (userExists) {
      userQuerySnapshot.forEach(async userDoc => {
        const user = await userDoc.data(); // this is a secondary check that should be more rare, however
        // if we no longer have an invite record, at minimum check the workspace to
        // see if the user is part of it

        if (_lodash.default.has(workspaceRecord.users, user.uid)) {
          _logging.default.info(`[Already in workspace] ${creatorUid} - Attempted to invite user [${email}] to ${workspaceId}`);

          return;
        }

        workspaceRecord.users[user.uid] = {
          role: 'collaborator',
          created: _firestore.admin.firestore.FieldValue.serverTimestamp()
        };
        await workspaceDoc.ref.update(workspaceRecord); // upgrade all of the events

        await _workspace.default.updateEventsForWorkspaceId(workspaceDoc.id, userDoc.id); // 2. add the workspace to the user account

        await updateUserWorkspace(userDoc.id, workspaceDoc.id); // add to workspace if its an existing user and notify them that they've been added

        _logging.default.info(`[Existing user invited] ${creatorUid} - Added [${email}] to ${workspaceId}`);

        return emailNotify.autoAcceptWorkspaceInvites(email, workspaceRecord.name);
      });
    } else {
      // this is a brand new user, send the appropriate email
      _logging.default.info(`[New user invited] ${creatorUid} - Added [${email}] to ${workspaceId}`);

      return emailNotify.inviteNewUserToWorkspace(email, workspaceRecord.name);
    }
  }));
};

const updateUserWorkspace = async (uid, workspaceId) => {
  if (_lodash.default.isNil(uid) || _lodash.default.isNil(workspaceId)) {
    throw new Error('uid or workspaceid cannot be null');
  }

  const doc = await _firestore.db.collection('users').doc(uid).get();
  const userRecord = doc.data();
  userRecord.workspaces = Object.assign({}, userRecord.workspaces, {
    [workspaceId]: true
  });
  return doc.ref.update(userRecord);
};

const createWorkspace = async (name, userId) => {
  const userDoc = await _firestore.db.collection('users').doc(userId).get();

  if (!userDoc.exists) {
    return Promise.reject(new Error(`User ${userId} does not exist`));
  }

  const user = userDoc.data();

  _logging.default.info(`Creating a new workspace ${name}`); // 1. create the workspace


  const workspaceDocRef = _firestore.db.collection('workspace').doc();

  const workspace = {
    users: {
      [userId]: {
        role: 'creator',
        created: _firestore.admin.firestore.FieldValue.serverTimestamp()
      }
    },
    name
  };
  await workspaceDocRef.set(workspace); // 2. add the workspace to the user account

  await updateUserWorkspace(userId, workspaceDocRef.id); // 2. Upgrade the user

  const upgradedEvents = await _workspace.default.updateEventsForWorkspaceId(workspaceDocRef.id, userId);

  _logging.default.info(`Updated ${upgradedEvents} for ${userId} and workspace ${name}`); // 3. send email that we have created a new workspace


  await emailNotify.createWorkspace(user.email, name);
  return workspaceDocRef.id;
};

const getDomains = async refreshToken => {
  const snapshot = await _firestore.db.collection('refreshToken').where('token', '==', refreshToken).get();
  const {
    uid
  } = snapshot.docs[0].data();
  const workspaceSnapshot = await _firestore.db.collection('workspace').where(`users.${uid}.role`, '>', '').get();
  const ids = [{
    type: 'uid',
    val: uid
  }];
  workspaceSnapshot.forEach(doc => ids.push({
    type: 'workspace',
    val: doc.id
  }));

  const eventsRef = _firestore.db.collection('events');

  const sitesQueries = await Promise.all(_lodash.default.chain(ids).map(({
    type,
    val
  }) => eventsRef.where(type === 'uid' ? `meta.userId` : 'meta.workspaceId', '==', val).get()).value());

  const sites = _lodash.default.chain(sitesQueries).flatMap(querySnapshot => {
    const docs = [];
    querySnapshot.forEach(doc => docs.push(doc));
    return docs;
  }).map(doc => {
    const data = doc.data();
    return data.url.hostname;
  }).uniq().value();

  return sites;
};

var _default = {
  retrieveClaimsForUid,
  createAndStoreRefreshToken,
  createTokenForUid,
  restoreTokenForUid,
  basicAuthentication,
  tokenAuthentication,
  initializeUser,
  signupUser,
  isUser,
  bearerToUid,
  inviteUsers,
  createWorkspace,
  getDomains
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,