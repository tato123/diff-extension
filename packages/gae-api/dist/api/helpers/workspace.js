"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _firestore = require("../../firestore");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const updateEventsForWorkspaceId = async (workspaceId, userId) => {
  if (_lodash.default.isNil(userId) && _lodash.default.isNil(workspaceId)) {
    return Promise.reject(new Error('Invalid user record'));
  } // 1. check if this user exists


  const userDocRef = await _firestore.db.collection('users').doc(userId).get();

  if (!userDocRef.exists) {
    return Promise.reject(new Error(`User ${userId} not found`));
  } // 2. Verify that user belongs to workspace


  const workspaceDocRef = await _firestore.db.collection('workspace').doc(workspaceId).get();

  if (!workspaceDocRef.exists) {
    return Promise.reject(new Error(`Workspace ${workspaceId} not found`));
  }

  const workspace = workspaceDocRef.data();

  if (!_lodash.default.has(workspace.users, userId)) {
    return Promise.reject(new Error(`User ${userId} is not associated with ${workspaceId}`));
  } // 3. upgrade all events for this user where there is
  // no workspaceid (saved against just userid account)


  const eventsQuerySnapshot = await _firestore.db.collection('events').where('meta.userId', '==', userId).get();
  let upgradedEvents = 0;
  eventsQuerySnapshot.forEach(async doc => {
    const event = doc.data();

    if (!event.meta.workspaceId) {
      upgradedEvents++;
      event.meta.workspaceId = workspaceId;
      await doc.ref.update(event);
    }
  });
  return upgradedEvents;
};

var _default = {
  updateEventsForWorkspaceId
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaGVscGVycy93b3Jrc3BhY2UuanMiXSwibmFtZXMiOlsidXBkYXRlRXZlbnRzRm9yV29ya3NwYWNlSWQiLCJ3b3Jrc3BhY2VJZCIsInVzZXJJZCIsIl8iLCJpc05pbCIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsInVzZXJEb2NSZWYiLCJkYiIsImNvbGxlY3Rpb24iLCJkb2MiLCJnZXQiLCJleGlzdHMiLCJ3b3Jrc3BhY2VEb2NSZWYiLCJ3b3Jrc3BhY2UiLCJkYXRhIiwiaGFzIiwidXNlcnMiLCJldmVudHNRdWVyeVNuYXBzaG90Iiwid2hlcmUiLCJ1cGdyYWRlZEV2ZW50cyIsImZvckVhY2giLCJldmVudCIsIm1ldGEiLCJyZWYiLCJ1cGRhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLDBCQUEwQixHQUFHLE9BQU9DLFdBQVAsRUFBb0JDLE1BQXBCLEtBQStCO0FBQ2hFLE1BQUlDLGdCQUFFQyxLQUFGLENBQVFGLE1BQVIsS0FBbUJDLGdCQUFFQyxLQUFGLENBQVFILFdBQVIsQ0FBdkIsRUFBNkM7QUFDM0MsV0FBT0ksT0FBTyxDQUFDQyxNQUFSLENBQWUsSUFBSUMsS0FBSixDQUFVLHFCQUFWLENBQWYsQ0FBUDtBQUNELEdBSCtELENBS2hFOzs7QUFDQSxRQUFNQyxVQUFVLEdBQUcsTUFBTUMsY0FDdEJDLFVBRHNCLENBQ1gsT0FEVyxFQUV0QkMsR0FGc0IsQ0FFbEJULE1BRmtCLEVBR3RCVSxHQUhzQixFQUF6Qjs7QUFLQSxNQUFJLENBQUNKLFVBQVUsQ0FBQ0ssTUFBaEIsRUFBd0I7QUFDdEIsV0FBT1IsT0FBTyxDQUFDQyxNQUFSLENBQWUsSUFBSUMsS0FBSixDQUFXLFFBQU9MLE1BQU8sWUFBekIsQ0FBZixDQUFQO0FBQ0QsR0FiK0QsQ0FlaEU7OztBQUNBLFFBQU1ZLGVBQWUsR0FBRyxNQUFNTCxjQUMzQkMsVUFEMkIsQ0FDaEIsV0FEZ0IsRUFFM0JDLEdBRjJCLENBRXZCVixXQUZ1QixFQUczQlcsR0FIMkIsRUFBOUI7O0FBS0EsTUFBSSxDQUFDRSxlQUFlLENBQUNELE1BQXJCLEVBQTZCO0FBQzNCLFdBQU9SLE9BQU8sQ0FBQ0MsTUFBUixDQUFlLElBQUlDLEtBQUosQ0FBVyxhQUFZTixXQUFZLFlBQW5DLENBQWYsQ0FBUDtBQUNEOztBQUVELFFBQU1jLFNBQVMsR0FBR0QsZUFBZSxDQUFDRSxJQUFoQixFQUFsQjs7QUFDQSxNQUFJLENBQUNiLGdCQUFFYyxHQUFGLENBQU1GLFNBQVMsQ0FBQ0csS0FBaEIsRUFBdUJoQixNQUF2QixDQUFMLEVBQXFDO0FBQ25DLFdBQU9HLE9BQU8sQ0FBQ0MsTUFBUixDQUNMLElBQUlDLEtBQUosQ0FBVyxRQUFPTCxNQUFPLDJCQUEwQkQsV0FBWSxFQUEvRCxDQURLLENBQVA7QUFHRCxHQTlCK0QsQ0FnQ2hFO0FBQ0E7OztBQUNBLFFBQU1rQixtQkFBbUIsR0FBRyxNQUFNVixjQUMvQkMsVUFEK0IsQ0FDcEIsUUFEb0IsRUFFL0JVLEtBRitCLENBRXpCLGFBRnlCLEVBRVYsSUFGVSxFQUVKbEIsTUFGSSxFQUcvQlUsR0FIK0IsRUFBbEM7QUFLQSxNQUFJUyxjQUFjLEdBQUcsQ0FBckI7QUFDQUYsRUFBQUEsbUJBQW1CLENBQUNHLE9BQXBCLENBQTRCLE1BQU1YLEdBQU4sSUFBYTtBQUN2QyxVQUFNWSxLQUFLLEdBQUdaLEdBQUcsQ0FBQ0ssSUFBSixFQUFkOztBQUNBLFFBQUksQ0FBQ08sS0FBSyxDQUFDQyxJQUFOLENBQVd2QixXQUFoQixFQUE2QjtBQUMzQm9CLE1BQUFBLGNBQWM7QUFDZEUsTUFBQUEsS0FBSyxDQUFDQyxJQUFOLENBQVd2QixXQUFYLEdBQXlCQSxXQUF6QjtBQUNBLFlBQU1VLEdBQUcsQ0FBQ2MsR0FBSixDQUFRQyxNQUFSLENBQWVILEtBQWYsQ0FBTjtBQUNEO0FBQ0YsR0FQRDtBQVNBLFNBQU9GLGNBQVA7QUFDRCxDQWxERDs7ZUFvRGU7QUFDYnJCLEVBQUFBO0FBRGEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBkYiB9IGZyb20gJy4uLy4uL2ZpcmVzdG9yZSc7XG5cbmNvbnN0IHVwZGF0ZUV2ZW50c0ZvcldvcmtzcGFjZUlkID0gYXN5bmMgKHdvcmtzcGFjZUlkLCB1c2VySWQpID0+IHtcbiAgaWYgKF8uaXNOaWwodXNlcklkKSAmJiBfLmlzTmlsKHdvcmtzcGFjZUlkKSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0ludmFsaWQgdXNlciByZWNvcmQnKSk7XG4gIH1cblxuICAvLyAxLiBjaGVjayBpZiB0aGlzIHVzZXIgZXhpc3RzXG4gIGNvbnN0IHVzZXJEb2NSZWYgPSBhd2FpdCBkYlxuICAgIC5jb2xsZWN0aW9uKCd1c2VycycpXG4gICAgLmRvYyh1c2VySWQpXG4gICAgLmdldCgpO1xuXG4gIGlmICghdXNlckRvY1JlZi5leGlzdHMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGBVc2VyICR7dXNlcklkfSBub3QgZm91bmRgKSk7XG4gIH1cblxuICAvLyAyLiBWZXJpZnkgdGhhdCB1c2VyIGJlbG9uZ3MgdG8gd29ya3NwYWNlXG4gIGNvbnN0IHdvcmtzcGFjZURvY1JlZiA9IGF3YWl0IGRiXG4gICAgLmNvbGxlY3Rpb24oJ3dvcmtzcGFjZScpXG4gICAgLmRvYyh3b3Jrc3BhY2VJZClcbiAgICAuZ2V0KCk7XG5cbiAgaWYgKCF3b3Jrc3BhY2VEb2NSZWYuZXhpc3RzKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgV29ya3NwYWNlICR7d29ya3NwYWNlSWR9IG5vdCBmb3VuZGApKTtcbiAgfVxuXG4gIGNvbnN0IHdvcmtzcGFjZSA9IHdvcmtzcGFjZURvY1JlZi5kYXRhKCk7XG4gIGlmICghXy5oYXMod29ya3NwYWNlLnVzZXJzLCB1c2VySWQpKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEVycm9yKGBVc2VyICR7dXNlcklkfSBpcyBub3QgYXNzb2NpYXRlZCB3aXRoICR7d29ya3NwYWNlSWR9YClcbiAgICApO1xuICB9XG5cbiAgLy8gMy4gdXBncmFkZSBhbGwgZXZlbnRzIGZvciB0aGlzIHVzZXIgd2hlcmUgdGhlcmUgaXNcbiAgLy8gbm8gd29ya3NwYWNlaWQgKHNhdmVkIGFnYWluc3QganVzdCB1c2VyaWQgYWNjb3VudClcbiAgY29uc3QgZXZlbnRzUXVlcnlTbmFwc2hvdCA9IGF3YWl0IGRiXG4gICAgLmNvbGxlY3Rpb24oJ2V2ZW50cycpXG4gICAgLndoZXJlKCdtZXRhLnVzZXJJZCcsICc9PScsIHVzZXJJZClcbiAgICAuZ2V0KCk7XG5cbiAgbGV0IHVwZ3JhZGVkRXZlbnRzID0gMDtcbiAgZXZlbnRzUXVlcnlTbmFwc2hvdC5mb3JFYWNoKGFzeW5jIGRvYyA9PiB7XG4gICAgY29uc3QgZXZlbnQgPSBkb2MuZGF0YSgpO1xuICAgIGlmICghZXZlbnQubWV0YS53b3Jrc3BhY2VJZCkge1xuICAgICAgdXBncmFkZWRFdmVudHMrKztcbiAgICAgIGV2ZW50Lm1ldGEud29ya3NwYWNlSWQgPSB3b3Jrc3BhY2VJZDtcbiAgICAgIGF3YWl0IGRvYy5yZWYudXBkYXRlKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB1cGdyYWRlZEV2ZW50cztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXBkYXRlRXZlbnRzRm9yV29ya3NwYWNlSWRcbn07XG4iXX0=