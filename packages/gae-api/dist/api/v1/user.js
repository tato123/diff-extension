"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emailListSignup = exports.getDomains = exports.createWorkspace = exports.inviteUsersToWorkspace = exports.verifyUser = exports.signup = exports.authenticate = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _mailgunJs = _interopRequireDefault(require("mailgun-js"));

var userManager = _interopRequireWildcard(require("../../firestore/users"));

var _logging = _interopRequireDefault(require("../../logging"));

var _email = _interopRequireDefault(require("../../email"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const authenticate = (req, res) => {
  // check the headers
  if (req.headers.authorization && req.headers.authorization.toLowerCase().startsWith('basic')) {
    return userManager.basicAuthentication(req, res);
  }

  if (!req.headers.authorization && req.body.indexOf('grant_type=refresh_token') !== -1) {
    return userManager.tokenAuthentication(req, res);
  }
};

exports.authenticate = authenticate;

const signup = async (req, res) => {
  const {
    email,
    password,
    displayName
  } = req.body;

  if (!email || !password) {
    return res.send(400, {
      err: 'Email / password required to create an account'
    });
  }

  try {
    const token = await userManager.signupUser(email, password, displayName);
    res.send(200, token);
  } catch (err) {
    res.send(400, {
      err: err.message
    });
  }
};

exports.signup = signup;

const verifyUser = async (req, res) => {
  const {
    email
  } = req.query;

  if (_lodash.default.isNil(email)) {
    return res.send(404, '');
  }

  try {
    const isValid = await userManager.isUser(email);

    if (isValid) {
      return res.send(200);
    }

    return res.send(404);
  } catch (err) {
    res.send(404);
  }
};

exports.verifyUser = verifyUser;

const inviteUsersToWorkspace = async (req, res) => {
  if (!req.user) {
    res.send(401, 'User not specified');
  }

  const {
    emails,
    workspaceId
  } = req.body;
  const {
    authorization
  } = req.headers;

  try {
    const creatorUid = await userManager.bearerToUid(authorization);

    if (!creatorUid) {
      return res.send(401, {
        message: 'Cannot invite user anonymously'
      });
    }

    await userManager.inviteUsers(emails, workspaceId, creatorUid);
    res.send(200, {
      status: 'invited'
    });
  } catch (err) {
    res.send(400, {
      message: 'not invited'
    });
  }
};

exports.inviteUsersToWorkspace = inviteUsersToWorkspace;

const createWorkspace = async (req, res) => {
  const {
    name
  } = req.body;
  const {
    authorization
  } = req.headers;

  try {
    const creatorUid = await userManager.bearerToUid(authorization);

    if (!creatorUid) {
      return res.send(401, {
        message: 'Cannot create workspace anonymously'
      });
    }

    const workspaceId = await userManager.createWorkspace(name, creatorUid);
    res.send(200, {
      workspaceId
    });
  } catch (err) {
    res.send(400, {
      message: `Workspace not created: ${err.message}`
    });
  }
};

exports.createWorkspace = createWorkspace;

const getDomains = async (req, res) => {
  const refreshToken = req.params.token.value;

  if (!refreshToken) {
    return res.json({
      domains: []
    });
  }

  try {
    const domains = await userManager.getDomains(refreshToken);
    res.json({
      domains
    });
  } catch (err) {
    res.json({
      message: err.message
    });
  }
};

exports.getDomains = getDomains;

const emailListSignup = async (req, res) => {
  const {
    list,
    feature
  } = req.query;
  const {
    firstname,
    lastname,
    email
  } = req.body;
  const apiKey = process.env.MAILGUN_API_KEY;
  const domain = process.env.MAILGUN_DOMAIN;
  const mailgun = new _mailgunJs.default({
    apiKey,
    domain
  });
  const maillist = mailgun.lists('early-access@mail.getdiff.app');
  const subscriber = {
    subscribed: true,
    address: email,
    name: `${firstname} ${lastname}`,
    vars: {
      feature,
      list
    }
  };
  maillist.members().create(subscriber).then(data => {
    _logging.default.debug(data);

    return _email.default.signupEmail({
      to: email,
      name: firstname
    });
  }).then(() => res.sendStatus(201)).catch(err => {
    _logging.default.error(err.message);

    res.send(400, err.message);
  });
};

exports.emailListSignup = emailListSignup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,