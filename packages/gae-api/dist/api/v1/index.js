"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var authController = _interopRequireWildcard(require("./auth"));

var healthController = _interopRequireWildcard(require("./health"));

var tasksController = _interopRequireWildcard(require("./tasks"));

var userController = _interopRequireWildcard(require("./user"));

var hooksController = _interopRequireWildcard(require("./hooks"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const express = require('express');

const router = express.Router();
router.get('/auth/firebase', authController.login);
router.get('/auth/refresh', authController.refresh);
router.get('/auth/codegrant', authController.codeGrantAuthorize);
router.get('/auth/renew', authController.renewSession);
router.get('/ah/health', healthController.health);
router.post('/signup', userController.signup);
router.post('/authenticate', userController.authenticate);
router.get('/validate', userController.verifyUser);
router.post('/invite', userController.inviteUsersToWorkspace);
router.post('/workspace', userController.createWorkspace);
router.get('/tokens/:token/domains', userController.getDomains);
router.post('/notifications/event/add/:eventId', tasksController.addEvent);
router.post('/user/email/signup', userController.emailListSignup);
router.post('/hooks/auth0/postUser', hooksController.auth0PostUser);
var _default = router;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdjEvaW5kZXguanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJnZXQiLCJhdXRoQ29udHJvbGxlciIsImxvZ2luIiwicmVmcmVzaCIsImNvZGVHcmFudEF1dGhvcml6ZSIsInJlbmV3U2Vzc2lvbiIsImhlYWx0aENvbnRyb2xsZXIiLCJoZWFsdGgiLCJwb3N0IiwidXNlckNvbnRyb2xsZXIiLCJzaWdudXAiLCJhdXRoZW50aWNhdGUiLCJ2ZXJpZnlVc2VyIiwiaW52aXRlVXNlcnNUb1dvcmtzcGFjZSIsImNyZWF0ZVdvcmtzcGFjZSIsImdldERvbWFpbnMiLCJ0YXNrc0NvbnRyb2xsZXIiLCJhZGRFdmVudCIsImVtYWlsTGlzdFNpZ251cCIsImhvb2tzQ29udHJvbGxlciIsImF1dGgwUG9zdFVzZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBRUEsTUFBTUMsTUFBTSxHQUFHRixPQUFPLENBQUNHLE1BQVIsRUFBZjtBQUVBRCxNQUFNLENBQUNFLEdBQVAsQ0FBVyxnQkFBWCxFQUE2QkMsY0FBYyxDQUFDQyxLQUE1QztBQUNBSixNQUFNLENBQUNFLEdBQVAsQ0FBVyxlQUFYLEVBQTRCQyxjQUFjLENBQUNFLE9BQTNDO0FBQ0FMLE1BQU0sQ0FBQ0UsR0FBUCxDQUFXLGlCQUFYLEVBQThCQyxjQUFjLENBQUNHLGtCQUE3QztBQUNBTixNQUFNLENBQUNFLEdBQVAsQ0FBVyxhQUFYLEVBQTBCQyxjQUFjLENBQUNJLFlBQXpDO0FBRUFQLE1BQU0sQ0FBQ0UsR0FBUCxDQUFXLFlBQVgsRUFBeUJNLGdCQUFnQixDQUFDQyxNQUExQztBQUNBVCxNQUFNLENBQUNVLElBQVAsQ0FBWSxTQUFaLEVBQXVCQyxjQUFjLENBQUNDLE1BQXRDO0FBQ0FaLE1BQU0sQ0FBQ1UsSUFBUCxDQUFZLGVBQVosRUFBNkJDLGNBQWMsQ0FBQ0UsWUFBNUM7QUFDQWIsTUFBTSxDQUFDRSxHQUFQLENBQVcsV0FBWCxFQUF3QlMsY0FBYyxDQUFDRyxVQUF2QztBQUNBZCxNQUFNLENBQUNVLElBQVAsQ0FBWSxTQUFaLEVBQXVCQyxjQUFjLENBQUNJLHNCQUF0QztBQUNBZixNQUFNLENBQUNVLElBQVAsQ0FBWSxZQUFaLEVBQTBCQyxjQUFjLENBQUNLLGVBQXpDO0FBQ0FoQixNQUFNLENBQUNFLEdBQVAsQ0FBVyx3QkFBWCxFQUFxQ1MsY0FBYyxDQUFDTSxVQUFwRDtBQUNBakIsTUFBTSxDQUFDVSxJQUFQLENBQVksbUNBQVosRUFBaURRLGVBQWUsQ0FBQ0MsUUFBakU7QUFFQW5CLE1BQU0sQ0FBQ1UsSUFBUCxDQUFZLG9CQUFaLEVBQWtDQyxjQUFjLENBQUNTLGVBQWpEO0FBRUFwQixNQUFNLENBQUNVLElBQVAsQ0FBWSx1QkFBWixFQUFxQ1csZUFBZSxDQUFDQyxhQUFyRDtlQUVldEIsTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGF1dGhDb250cm9sbGVyIGZyb20gJy4vYXV0aCc7XG5pbXBvcnQgKiBhcyBoZWFsdGhDb250cm9sbGVyIGZyb20gJy4vaGVhbHRoJztcbmltcG9ydCAqIGFzIHRhc2tzQ29udHJvbGxlciBmcm9tICcuL3Rhc2tzJztcbmltcG9ydCAqIGFzIHVzZXJDb250cm9sbGVyIGZyb20gJy4vdXNlcic7XG5pbXBvcnQgKiBhcyBob29rc0NvbnRyb2xsZXIgZnJvbSAnLi9ob29rcyc7XG5cbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5cbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbnJvdXRlci5nZXQoJy9hdXRoL2ZpcmViYXNlJywgYXV0aENvbnRyb2xsZXIubG9naW4pO1xucm91dGVyLmdldCgnL2F1dGgvcmVmcmVzaCcsIGF1dGhDb250cm9sbGVyLnJlZnJlc2gpO1xucm91dGVyLmdldCgnL2F1dGgvY29kZWdyYW50JywgYXV0aENvbnRyb2xsZXIuY29kZUdyYW50QXV0aG9yaXplKTtcbnJvdXRlci5nZXQoJy9hdXRoL3JlbmV3JywgYXV0aENvbnRyb2xsZXIucmVuZXdTZXNzaW9uKTtcblxucm91dGVyLmdldCgnL2FoL2hlYWx0aCcsIGhlYWx0aENvbnRyb2xsZXIuaGVhbHRoKTtcbnJvdXRlci5wb3N0KCcvc2lnbnVwJywgdXNlckNvbnRyb2xsZXIuc2lnbnVwKTtcbnJvdXRlci5wb3N0KCcvYXV0aGVudGljYXRlJywgdXNlckNvbnRyb2xsZXIuYXV0aGVudGljYXRlKTtcbnJvdXRlci5nZXQoJy92YWxpZGF0ZScsIHVzZXJDb250cm9sbGVyLnZlcmlmeVVzZXIpO1xucm91dGVyLnBvc3QoJy9pbnZpdGUnLCB1c2VyQ29udHJvbGxlci5pbnZpdGVVc2Vyc1RvV29ya3NwYWNlKTtcbnJvdXRlci5wb3N0KCcvd29ya3NwYWNlJywgdXNlckNvbnRyb2xsZXIuY3JlYXRlV29ya3NwYWNlKTtcbnJvdXRlci5nZXQoJy90b2tlbnMvOnRva2VuL2RvbWFpbnMnLCB1c2VyQ29udHJvbGxlci5nZXREb21haW5zKTtcbnJvdXRlci5wb3N0KCcvbm90aWZpY2F0aW9ucy9ldmVudC9hZGQvOmV2ZW50SWQnLCB0YXNrc0NvbnRyb2xsZXIuYWRkRXZlbnQpO1xuXG5yb3V0ZXIucG9zdCgnL3VzZXIvZW1haWwvc2lnbnVwJywgdXNlckNvbnRyb2xsZXIuZW1haWxMaXN0U2lnbnVwKTtcblxucm91dGVyLnBvc3QoJy9ob29rcy9hdXRoMC9wb3N0VXNlcicsIGhvb2tzQ29udHJvbGxlci5hdXRoMFBvc3RVc2VyKTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl19