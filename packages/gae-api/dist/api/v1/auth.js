"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renewSession = exports.codeGrantAuthorize = exports.refresh = exports.login = void 0;

var _expressJwt = _interopRequireDefault(require("express-jwt"));

var _jwksRsa = _interopRequireDefault(require("jwks-rsa"));

var _firestore = require("../../firestore");

var _logging = _interopRequireDefault(require("../../logging"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const request = require('request');

const config = {
  AUTH0_DOMAIN: process.env.AUTH0_DOMAIN,
  AUTH0_API_AUDIENCE: process.env.AUTH0_CLIENTID
}; // Auth0 athentication middleware

const jwtCheck = (0, _expressJwt.default)({
  secret: _jwksRsa.default.expressJwtSecret({
    cache: true,
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri: `https://${config.AUTH0_DOMAIN}/.well-known/jwks.json`
  }),
  // audience: config.AUTH0_API_AUDIENCE,
  issuer: `https://${config.AUTH0_DOMAIN}/`,
  algorithm: 'RS256'
}); // GET object containing Firebase custom token

const login = [jwtCheck, (req, res) => {
  // Create UID from authenticated Auth0 user
  const uid = req.user.sub;

  _logging.default.debug(`JWT check uid ${JSON.stringify(req.user.sub)}`); // Mint token using Firebase Admin SDK


  _firestore.admin.auth().createCustomToken(uid).then(customToken => {
    _logging.default.debug(`Firebase custom token for ${customToken}`); // Response must be an object or Firebase errors


    return res.json({
      firebaseToken: customToken
    });
  }).catch(err => res.status(500).send({
    message: 'Something went wrong acquiring a Firebase token.',
    error: err
  }));
}];
exports.login = login;

const refresh = (req, res) => {
  const {
    query: {
      refreshToken
    }
  } = req;

  if (!refreshToken) {
    res.send(401, 'refresh token required');
  }

  _logging.default.debug(`Refreshing token for ${refreshToken}`);

  const options = {
    method: 'POST',
    url: `https://${process.env.AUTH0_DOMAIN}/oauth/token`,
    headers: {
      'content-type': 'application/json'
    },
    body: {
      grant_type: 'refresh_token',
      client_id: process.env.AUTH0_CLIENTID,
      client_secret: process.env.AUTH0_CLIENT_SECRET,
      refresh_token: refreshToken
    },
    json: true
  };
  request(options, (error, response, body) => {
    if (error) {
      res.send(401);
    }

    res.send(200, body);
  });
};

exports.refresh = refresh;

const codeGrantAuthorize = (req, res) => {
  const {
    query: {
      code,
      redirectUri
    }
  } = req;
  const options = {
    method: 'POST',
    url: `https://${process.env.AUTH0_DOMAIN}/oauth/token`,
    headers: {
      'content-type': 'application/json'
    },
    body: {
      grant_type: 'authorization_code',
      client_id: process.env.AUTH0_CLIENTID,
      client_secret: process.env.AUTH0_CLIENT_SECRET,
      code,
      redirect_uri: redirectUri
    },
    json: true
  };
  request(options, (error, response, body) => {
    if (error) {
      return res.send(403, error);
    }

    return res.send(200, body);
  });
};

exports.codeGrantAuthorize = codeGrantAuthorize;

const renewSession = async (req, res) => {
  const {
    query: {
      refreshToken
    }
  } = req;

  if (!refreshToken) {
    res.send(401, 'A refresh token is required');
  }

  const options = {
    method: 'POST',
    url: `https://${process.env.AUTH0_DOMAIN}/oauth/token`,
    headers: {
      'content-type': 'application/json'
    },
    body: {
      grant_type: 'refresh_token',
      client_id: process.env.AUTH0_CLIENTID,
      client_secret: process.env.AUTH0_CLIENT_SECRET,
      refresh_token: refreshToken
    },
    json: true
  };
  request(options, (error, response, body) => {
    if (error) {
      return res.send(403, error);
    }

    return res.send(200, body);
  });
};

exports.renewSession = renewSession;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdjEvYXV0aC5qcyJdLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImNvbmZpZyIsIkFVVEgwX0RPTUFJTiIsInByb2Nlc3MiLCJlbnYiLCJBVVRIMF9BUElfQVVESUVOQ0UiLCJBVVRIMF9DTElFTlRJRCIsImp3dENoZWNrIiwic2VjcmV0IiwiandrcyIsImV4cHJlc3NKd3RTZWNyZXQiLCJjYWNoZSIsInJhdGVMaW1pdCIsImp3a3NSZXF1ZXN0c1Blck1pbnV0ZSIsImp3a3NVcmkiLCJpc3N1ZXIiLCJhbGdvcml0aG0iLCJsb2dpbiIsInJlcSIsInJlcyIsInVpZCIsInVzZXIiLCJzdWIiLCJsb2dnaW5nIiwiZGVidWciLCJKU09OIiwic3RyaW5naWZ5IiwiYWRtaW4iLCJhdXRoIiwiY3JlYXRlQ3VzdG9tVG9rZW4iLCJ0aGVuIiwiY3VzdG9tVG9rZW4iLCJqc29uIiwiZmlyZWJhc2VUb2tlbiIsImNhdGNoIiwiZXJyIiwic3RhdHVzIiwic2VuZCIsIm1lc3NhZ2UiLCJlcnJvciIsInJlZnJlc2giLCJxdWVyeSIsInJlZnJlc2hUb2tlbiIsIm9wdGlvbnMiLCJtZXRob2QiLCJ1cmwiLCJoZWFkZXJzIiwiYm9keSIsImdyYW50X3R5cGUiLCJjbGllbnRfaWQiLCJjbGllbnRfc2VjcmV0IiwiQVVUSDBfQ0xJRU5UX1NFQ1JFVCIsInJlZnJlc2hfdG9rZW4iLCJyZXNwb25zZSIsImNvZGVHcmFudEF1dGhvcml6ZSIsImNvZGUiLCJyZWRpcmVjdFVyaSIsInJlZGlyZWN0X3VyaSIsInJlbmV3U2Vzc2lvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOzs7O0FBRUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFFQSxNQUFNQyxNQUFNLEdBQUc7QUFDYkMsRUFBQUEsWUFBWSxFQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsWUFEYjtBQUViRyxFQUFBQSxrQkFB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RjtBQURILE1BRUZ4QixHQUZKOztBQUlBLE1BQUksQ0FBQ3dCLFlBQUwsRUFBbUI7QUFDakJ2QixJQUFBQSxHQUFHLENBQUNrQixJQUFKLENBQVMsR0FBVCxFQUFjLDZCQUFkO0FBQ0Q7O0FBRUQsUUFBTU0sT0FBTyxHQUFHO0FBQ2RDLElBQUFBLE1BQU0sRUFBRSxNQURNO0FBRWRDLElBQUFBLEdBQUcsRUFBRyxXQUFVMUMsT0FBTyxDQUFDQyxHQUFSLENBQVlGLFlBQWEsY0FGM0I7QUFHZDRDLElBQUFBLE9BQU8sRUFBRTtBQUFFLHNCQUFnQjtBQUFsQixLQUhLO0FBSWRDLElBQUFBLElBQUksRUFBRTtBQUNKQyxNQUFBQSxVQUFVLEVBQUUsZUFEUjtBQUVKQyxNQUFBQSxTQUFTLEVBQUU5QyxPQUFPLENBQUNDLEdBQVIsQ0FBWUUsY0FGbkI7QUFHSjRDLE1BQUFBLGFBQWEsRUFBRS9DLE9BQU8sQ0FBQ0MsR0FBUixDQUFZK0MsbUJBSHZCO0FBSUpDLE1BQUFBLGFBQWEsRUFBRVY7QUFKWCxLQUpRO0FBVWRWLElBQUFBLElBQUksRUFBRTtBQVZRLEdBQWhCO0FBYUFqQyxFQUFBQSxPQUFPLENBQUM0QyxPQUFELEVBQVUsQ0FBQ0osS0FBRCxFQUFRYyxRQUFSLEVBQWtCTixJQUFsQixLQUEyQjtBQUMxQyxRQUFJUixLQUFKLEVBQVc7QUFDVCxhQUFPcEIsR0FBRyxDQUFDa0IsSUFBSixDQUFTLEdBQVQsRUFBY0UsS0FBZCxDQUFQO0FBQ0Q7O0FBRUQsV0FBT3BCLEdBQUcsQ0FBQ2tCLElBQUosQ0FBUyxHQUFULEVBQWNVLElBQWQsQ0FBUDtBQUNELEdBTk0sQ0FBUDtBQU9ELENBN0JNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGp3dCBmcm9tICdleHByZXNzLWp3dCc7XG5pbXBvcnQgandrcyBmcm9tICdqd2tzLXJzYSc7XG5cbmltcG9ydCB7IGFkbWluIH0gZnJvbSAnLi4vLi4vZmlyZXN0b3JlJztcbmltcG9ydCBsb2dnaW5nIGZyb20gJy4uLy4uL2xvZ2dpbmcnO1xuXG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgncmVxdWVzdCcpO1xuXG5jb25zdCBjb25maWcgPSB7XG4gIEFVVEgwX0RPTUFJTjogcHJvY2Vzcy5lbnYuQVVUSDBfRE9NQUlOLFxuICBBVVRIMF9BUElfQVVESUVOQ0U6IHByb2Nlc3MuZW52LkFVVEgwX0NMSUVOVElEXG59O1xuXG4vLyBBdXRoMCBhdGhlbnRpY2F0aW9uIG1pZGRsZXdhcmVcbmNvbnN0IGp3dENoZWNrID0gand0KHtcbiAgc2VjcmV0OiBqd2tzLmV4cHJlc3NKd3RTZWNyZXQoe1xuICAgIGNhY2hlOiB0cnVlLFxuICAgIHJhdGVMaW1pdDogdHJ1ZSxcbiAgICBqd2tzUmVxdWVzdHNQZXJNaW51dGU6IDUsXG4gICAgandrc1VyaTogYGh0dHBzOi8vJHtjb25maWcuQVVUSDBfRE9NQUlOfS8ud2VsbC1rbm93bi9qd2tzLmpzb25gXG4gIH0pLFxuICAvLyBhdWRpZW5jZTogY29uZmlnLkFVVEgwX0FQSV9BVURJRU5DRSxcbiAgaXNzdWVyOiBgaHR0cHM6Ly8ke2NvbmZpZy5BVVRIMF9ET01BSU59L2AsXG4gIGFsZ29yaXRobTogJ1JTMjU2J1xufSk7XG5cbi8vIEdFVCBvYmplY3QgY29udGFpbmluZyBGaXJlYmFzZSBjdXN0b20gdG9rZW5cbmV4cG9ydCBjb25zdCBsb2dpbiA9IFtcbiAgand0Q2hlY2ssXG4gIChyZXEsIHJlcykgPT4ge1xuICAgIC8vIENyZWF0ZSBVSUQgZnJvbSBhdXRoZW50aWNhdGVkIEF1dGgwIHVzZXJcbiAgICBjb25zdCB1aWQgPSByZXEudXNlci5zdWI7XG4gICAgbG9nZ2luZy5kZWJ1ZyhgSldUIGNoZWNrIHVpZCAke0pTT04uc3RyaW5naWZ5KHJlcS51c2VyLnN1Yil9YCk7XG4gICAgLy8gTWludCB0b2tlbiB1c2luZyBGaXJlYmFzZSBBZG1pbiBTREtcbiAgICBhZG1pblxuICAgICAgLmF1dGgoKVxuICAgICAgLmNyZWF0ZUN1c3RvbVRva2VuKHVpZClcbiAgICAgIC50aGVuKGN1c3RvbVRva2VuID0+IHtcbiAgICAgICAgbG9nZ2luZy5kZWJ1ZyhgRmlyZWJhc2UgY3VzdG9tIHRva2VuIGZvciAke2N1c3RvbVRva2VufWApO1xuICAgICAgICAvLyBSZXNwb25zZSBtdXN0IGJlIGFuIG9iamVjdCBvciBGaXJlYmFzZSBlcnJvcnNcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgZmlyZWJhc2VUb2tlbjogY3VzdG9tVG9rZW4gfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PlxuICAgICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCh7XG4gICAgICAgICAgbWVzc2FnZTogJ1NvbWV0aGluZyB3ZW50IHdyb25nIGFjcXVpcmluZyBhIEZpcmViYXNlIHRva2VuLicsXG4gICAgICAgICAgZXJyb3I6IGVyclxuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXTtcblxuZXhwb3J0IGNvbnN0IHJlZnJlc2ggPSAocmVxLCByZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIHF1ZXJ5OiB7IHJlZnJlc2hUb2tlbiB9XG4gIH0gPSByZXE7XG5cbiAgaWYgKCFyZWZyZXNoVG9rZW4pIHtcbiAgICByZXMuc2VuZCg0MDEsICdyZWZyZXNoIHRva2VuIHJlcXVpcmVkJyk7XG4gIH1cblxuICBsb2dnaW5nLmRlYnVnKGBSZWZyZXNoaW5nIHRva2VuIGZvciAke3JlZnJlc2hUb2tlbn1gKTtcblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIHVybDogYGh0dHBzOi8vJHtwcm9jZXNzLmVudi5BVVRIMF9ET01BSU59L29hdXRoL3Rva2VuYCxcbiAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICBib2R5OiB7XG4gICAgICBncmFudF90eXBlOiAncmVmcmVzaF90b2tlbicsXG4gICAgICBjbGllbnRfaWQ6IHByb2Nlc3MuZW52LkFVVEgwX0NMSUVOVElELFxuICAgICAgY2xpZW50X3NlY3JldDogcHJvY2Vzcy5lbnYuQVVUSDBfQ0xJRU5UX1NFQ1JFVCxcbiAgICAgIHJlZnJlc2hfdG9rZW46IHJlZnJlc2hUb2tlblxuICAgIH0sXG4gICAganNvbjogdHJ1ZVxuICB9O1xuXG4gIHJlcXVlc3Qob3B0aW9ucywgKGVycm9yLCByZXNwb25zZSwgYm9keSkgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcmVzLnNlbmQoNDAxKTtcbiAgICB9XG5cbiAgICByZXMuc2VuZCgyMDAsIGJvZHkpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2RlR3JhbnRBdXRob3JpemUgPSAocmVxLCByZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIHF1ZXJ5OiB7IGNvZGUsIHJlZGlyZWN0VXJpIH1cbiAgfSA9IHJlcTtcblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIHVybDogYGh0dHBzOi8vJHtwcm9jZXNzLmVudi5BVVRIMF9ET01BSU59L29hdXRoL3Rva2VuYCxcbiAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICBib2R5OiB7XG4gICAgICBncmFudF90eXBlOiAnYXV0aG9yaXphdGlvbl9jb2RlJyxcbiAgICAgIGNsaWVudF9pZDogcHJvY2Vzcy5lbnYuQVVUSDBfQ0xJRU5USUQsXG4gICAgICBjbGllbnRfc2VjcmV0OiBwcm9jZXNzLmVudi5BVVRIMF9DTElFTlRfU0VDUkVULFxuICAgICAgY29kZSxcbiAgICAgIHJlZGlyZWN0X3VyaTogcmVkaXJlY3RVcmlcbiAgICB9LFxuICAgIGpzb246IHRydWVcbiAgfTtcblxuICByZXF1ZXN0KG9wdGlvbnMsIChlcnJvciwgcmVzcG9uc2UsIGJvZHkpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiByZXMuc2VuZCg0MDMsIGVycm9yKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLnNlbmQoMjAwLCBib2R5KTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVuZXdTZXNzaW9uID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBxdWVyeTogeyByZWZyZXNoVG9rZW4gfVxuICB9ID0gcmVxO1xuXG4gIGlmICghcmVmcmVzaFRva2VuKSB7XG4gICAgcmVzLnNlbmQoNDAxLCAnQSByZWZyZXNoIHRva2VuIGlzIHJlcXVpcmVkJyk7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIHVybDogYGh0dHBzOi8vJHtwcm9jZXNzLmVudi5BVVRIMF9ET01BSU59L29hdXRoL3Rva2VuYCxcbiAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICBib2R5OiB7XG4gICAgICBncmFudF90eXBlOiAncmVmcmVzaF90b2tlbicsXG4gICAgICBjbGllbnRfaWQ6IHByb2Nlc3MuZW52LkFVVEgwX0NMSUVOVElELFxuICAgICAgY2xpZW50X3NlY3JldDogcHJvY2Vzcy5lbnYuQVVUSDBfQ0xJRU5UX1NFQ1JFVCxcbiAgICAgIHJlZnJlc2hfdG9rZW46IHJlZnJlc2hUb2tlblxuICAgIH0sXG4gICAganNvbjogdHJ1ZVxuICB9O1xuXG4gIHJlcXVlc3Qob3B0aW9ucywgKGVycm9yLCByZXNwb25zZSwgYm9keSkgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIHJlcy5zZW5kKDQwMywgZXJyb3IpO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuc2VuZCgyMDAsIGJvZHkpO1xuICB9KTtcbn07XG4iXX0=