"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renewSession = exports.codeGrantAuthorize = exports.refresh = exports.login = void 0;

var _expressJwt = _interopRequireDefault(require("express-jwt"));

var _jwksRsa = _interopRequireDefault(require("jwks-rsa"));

var _firestore = require("../../firestore");

var _logging = _interopRequireDefault(require("../../logging"));

var userCollection = _interopRequireWildcard(require("../../firestore/users"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const request = require('request');

const config = {
  AUTH0_DOMAIN: process.env.AUTH0_DOMAIN,
  AUTH0_API_AUDIENCE: process.env.AUTH0_API_AUDIENCE
}; // Auth0 athentication middleware

const jwtCheck = (0, _expressJwt.default)({
  secret: _jwksRsa.default.expressJwtSecret({
    cache: true,
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri: `https://${config.AUTH0_DOMAIN}/.well-known/jwks.json`
  }),
  // audience: config.AUTH0_API_AUDIENCE,
  issuer: `https://${config.AUTH0_DOMAIN}/`,
  algorithm: 'RS256'
});

const userProfileSync = async (req, res, next) => {
  _logging.default.info('------------[first-time check] ----------');

  console.log('user is', req.user.sub);

  const userRef = _firestore.db.collection('users').doc(req.user.sub);

  const userDoc = await userRef.get();

  if (userDoc.exists) {
    console.log('Syncing profile information');
    await userRef.update(req.user);
  } else {
    console.log('user does not exists');
    await userCollection.registerUser(req.user);
  }

  console.log(req.user);

  _logging.default.info('-----------------------------------------');

  next();
}; // GET object containing Firebase custom token


const login = [jwtCheck, userProfileSync, (req, res) => {
  // Create UID from authenticated Auth0 user
  const uid = req.user.sub;

  _logging.default.debug(`JWT check uid ${JSON.stringify(req.user)}`); // Mint token using Firebase Admin SDK


  _firestore.admin.auth().createCustomToken(uid).then(customToken => {
    _logging.default.debug(`Firebase custom token for ${customToken}`); // Response must be an object or Firebase errors


    return res.json({
      firebaseToken: customToken
    });
  }).catch(err => res.status(500).send({
    message: 'Something went wrong acquiring a Firebase token.',
    error: err
  }));
}];
exports.login = login;

const refresh = (req, res) => {
  const {
    query: {
      refreshToken
    }
  } = req;

  if (!refreshToken) {
    res.send(401, 'refresh token required');
  }

  _logging.default.debug(`Refreshing token for ${refreshToken}`);

  const options = {
    method: 'POST',
    url: `https://${process.env.AUTH0_DOMAIN}/oauth/token`,
    headers: {
      'content-type': 'application/json'
    },
    body: {
      grant_type: 'refresh_token',
      client_id: process.env.AUTH0_CLIENTID,
      client_secret: process.env.AUTH0_CLIENT_SECRET,
      refresh_token: refreshToken
    },
    json: true
  };
  request(options, (error, response, body) => {
    if (error) {
      res.send(401);
    }

    res.send(200, body);
  });
};

exports.refresh = refresh;
const codeGrantAuthorize = [(req, res, next) => {
  const {
    query: {
      code,
      redirectUri
    }
  } = req;
  const options = {
    method: 'POST',
    url: `https://${process.env.AUTH0_DOMAIN}/oauth/token`,
    headers: {
      'content-type': 'application/json'
    },
    body: {
      grant_type: 'authorization_code',
      client_id: process.env.AUTH0_CLIENTID,
      client_secret: process.env.AUTH0_CLIENT_SECRET,
      code,
      redirect_uri: redirectUri
    },
    json: true
  };
  request(options, (error, response, body) => {
    if (error) {
      next(error);
    }

    req.headers.authorization = `Bearer ${body.id_token}`;
    req._user = body;
    next();
  });
}, jwtCheck, userProfileSync, (req, res) => {
  res.status(200).send(req._user);
}];
exports.codeGrantAuthorize = codeGrantAuthorize;

const renewSession = async (req, res) => {
  const {
    query: {
      refreshToken
    }
  } = req;

  if (!refreshToken) {
    res.send(401, 'A refresh token is required');
  }

  const options = {
    method: 'POST',
    url: `https://${process.env.AUTH0_DOMAIN}/oauth/token`,
    headers: {
      'content-type': 'application/json'
    },
    body: {
      grant_type: 'refresh_token',
      client_id: process.env.AUTH0_CLIENTID,
      client_secret: process.env.AUTH0_CLIENT_SECRET,
      refresh_token: refreshToken
    },
    json: true
  };
  request(options, (error, response, body) => {
    if (error) {
      return res.send(403, error);
    }

    return res.send(200, body);
  });
};

exports.renewSession = renewSession;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,