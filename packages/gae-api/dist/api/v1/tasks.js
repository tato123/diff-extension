"use strict";

var emails = _interopRequireWildcard(require("../../email/email"));

var _logging = _interopRequireDefault(require("../../logging"));

var _firestore = require("../../firestore");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

exports.addEvent = async (req, res) => {
  const eventsRef = _firestore.db.collection('events');

  const workspaceRef = _firestore.db.collection('workspace');

  const activityRef = _firestore.db.collection('activity');

  const usersRef = _firestore.db.collection('users');

  const eventId = req.params.eventId.value;

  _logging.default.info('Received event id', eventId);

  if (!eventId) {
    return res.send(404);
  } // get the event type


  const eventDoc = await eventsRef.doc(eventId).get();
  const event = eventDoc.data();

  _logging.default.info('Checking event', event); // check if there is a workspace id


  if (!event.meta.workspaceId) {
    return res.send(404);
  } // 2. Get all the users associated with the workspace


  const workspaceDoc = await workspaceRef.doc(event.meta.workspaceId).get();
  const workspace = workspaceDoc.data();
  const userIds = Object.keys(workspace.users).filter(userId => userId !== event.meta.userId); // 3. Filter users who haven't view an event

  const unseenIdList = (await Promise.all(userIds.map(async userId => {
    const user = await activityRef.doc(userId).collection('seen').doc(eventDoc.id).get(); // if we have viewed it, there will be a record
    // we wnant the inverse, where seen records dont exists

    return user.exists ? null : userId;
  }))).filter(x => x != null); // 4. convert to an email list

  const emailList = await Promise.all(unseenIdList.map(async id => {
    const userDoc = await usersRef.doc(id).get();
    const user = userDoc.data();
    return user.email;
  })); // 5. Send these folks an email

  await Promise.all(emailList.map(async email => {
    _logging.default.info('Sending notification to email', email, 'for eventId', eventDoc.id);

    return emails.newComment(email, event);
  }));
  res.send(200, JSON.stringify(emailList));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdjEvdGFza3MuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsImFkZEV2ZW50IiwicmVxIiwicmVzIiwiZXZlbnRzUmVmIiwiZGIiLCJjb2xsZWN0aW9uIiwid29ya3NwYWNlUmVmIiwiYWN0aXZpdHlSZWYiLCJ1c2Vyc1JlZiIsImV2ZW50SWQiLCJwYXJhbXMiLCJ2YWx1ZSIsImxvZ2dpbmciLCJpbmZvIiwic2VuZCIsImV2ZW50RG9jIiwiZG9jIiwiZ2V0IiwiZXZlbnQiLCJkYXRhIiwibWV0YSIsIndvcmtzcGFjZUlkIiwid29ya3NwYWNlRG9jIiwid29ya3NwYWNlIiwidXNlcklkcyIsIk9iamVjdCIsImtleXMiLCJ1c2VycyIsImZpbHRlciIsInVzZXJJZCIsInVuc2VlbklkTGlzdCIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJ1c2VyIiwiaWQiLCJleGlzdHMiLCJ4IiwiZW1haWxMaXN0IiwidXNlckRvYyIsImVtYWlsIiwiZW1haWxzIiwibmV3Q29tbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBQSxPQUFPLENBQUNDLFFBQVIsR0FBbUIsT0FBT0MsR0FBUCxFQUFZQyxHQUFaLEtBQW9CO0FBQ3JDLFFBQU1DLFNBQVMsR0FBR0MsY0FBR0MsVUFBSCxDQUFjLFFBQWQsQ0FBbEI7O0FBQ0EsUUFBTUMsWUFBWSxHQUFHRixjQUFHQyxVQUFILENBQWMsV0FBZCxDQUFyQjs7QUFDQSxRQUFNRSxXQUFXLEdBQUdILGNBQUdDLFVBQUgsQ0FBYyxVQUFkLENBQXBCOztBQUNBLFFBQU1HLFFBQVEsR0FBR0osY0FBR0MsVUFBSCxDQUFjLE9BQWQsQ0FBakI7O0FBRUEsUUFBTUksT0FBTyxHQUFHUixHQUFHLENBQUNTLE1BQUosQ0FBV0QsT0FBWCxDQUFtQkUsS0FBbkM7O0FBQ0FDLG1CQUFRQyxJQUFSLENBQWEsbUJBQWIsRUFBa0NKLE9BQWxDOztBQUNBLE1BQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ1osV0FBT1AsR0FBRyxDQUFDWSxJQUFKLENBQVMsR0FBVCxDQUFQO0FBQ0QsR0FWb0MsQ0FZckM7OztBQUNBLFFBQU1DLFFBQVEsR0FBRyxNQUFNWixTQUFTLENBQUNhLEdBQVYsQ0FBY1AsT0FBZCxFQUF1QlEsR0FBdkIsRUFBdkI7QUFDQSxRQUFNQyxLQUFLLEdBQUdILFFBQVEsQ0FBQ0ksSUFBVCxFQUFkOztBQUNBUCxtQkFBUUMsSUFBUixDQUFhLGdCQUFiLEVBQStCSyxLQUEvQixFQWZxQyxDQWlCckM7OztBQUNBLE1BQUksQ0FBQ0EsS0FBSyxDQUFDRSxJQUFOLENBQVdDLFdBQWhCLEVBQTZCO0FBQzNCLFdBQU9uQixHQUFHLENBQUNZLElBQUosQ0FBUyxHQUFULENBQVA7QUFDRCxHQXBCb0MsQ0FzQnJDOzs7QUFDQSxRQUFNUSxZQUFZLEdBQUcsTUFBTWhCLFlBQVksQ0FBQ1UsR0FBYixDQUFpQkUsS0FBSyxDQUFDRSxJQUFOLENBQVdDLFdBQTVCLEVBQXlDSixHQUF6QyxFQUEzQjtBQUNBLFFBQU1NLFNBQVMsR0FBR0QsWUFBWSxDQUFDSCxJQUFiLEVBQWxCO0FBQ0EsUUFBTUssT0FBTyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsU0FBUyxDQUFDSSxLQUF0QixFQUE2QkMsTUFBN0IsQ0FDZEMsTUFBTSxJQUFJQSxNQUFNLEtBQUtYLEtBQUssQ0FBQ0UsSUFBTixDQUFXUyxNQURsQixDQUFoQixDQXpCcUMsQ0E2QnJDOztBQUNBLFFBQU1DLFlBQVksR0FBRyxDQUFDLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBUixDQUMxQlIsT0FBTyxDQUFDUyxHQUFSLENBQVksTUFBTUosTUFBTixJQUFnQjtBQUMxQixVQUFNSyxJQUFJLEdBQUcsTUFBTTNCLFdBQVcsQ0FDM0JTLEdBRGdCLENBQ1phLE1BRFksRUFFaEJ4QixVQUZnQixDQUVMLE1BRkssRUFHaEJXLEdBSGdCLENBR1pELFFBQVEsQ0FBQ29CLEVBSEcsRUFJaEJsQixHQUpnQixFQUFuQixDQUQwQixDQU8xQjtBQUNBOztBQUNBLFdBQU9pQixJQUFJLENBQUNFLE1BQUwsR0FBYyxJQUFkLEdBQXFCUCxNQUE1QjtBQUNELEdBVkQsQ0FEMEIsQ0FBUCxFQVlsQkQsTUFaa0IsQ0FZWFMsQ0FBQyxJQUFJQSxDQUFDLElBQUksSUFaQyxDQUFyQixDQTlCcUMsQ0E0Q3JDOztBQUNBLFFBQU1DLFNBQVMsR0FBRyxNQUFNUCxPQUFPLENBQUNDLEdBQVIsQ0FDdEJGLFlBQVksQ0FBQ0csR0FBYixDQUFpQixNQUFNRSxFQUFOLElBQVk7QUFDM0IsVUFBTUksT0FBTyxHQUFHLE1BQU0vQixRQUFRLENBQUNRLEdBQVQsQ0FBYW1CLEVBQWIsRUFBaUJsQixHQUFqQixFQUF0QjtBQUNBLFVBQU1pQixJQUFJLEdBQUdLLE9BQU8sQ0FBQ3BCLElBQVIsRUFBYjtBQUNBLFdBQU9lLElBQUksQ0FBQ00sS0FBWjtBQUNELEdBSkQsQ0FEc0IsQ0FBeEIsQ0E3Q3FDLENBcURyQzs7QUFDQSxRQUFNVCxPQUFPLENBQUNDLEdBQVIsQ0FDSk0sU0FBUyxDQUFDTCxHQUFWLENBQWMsTUFBTU8sS0FBTixJQUFlO0FBQzNCNUIscUJBQVFDLElBQVIsQ0FDRSwrQkFERixFQUVFMkIsS0FGRixFQUdFLGFBSEYsRUFJRXpCLFFBQVEsQ0FBQ29CLEVBSlg7O0FBTUEsV0FBT00sTUFBTSxDQUFDQyxVQUFQLENBQWtCRixLQUFsQixFQUF5QnRCLEtBQXpCLENBQVA7QUFDRCxHQVJELENBREksQ0FBTjtBQVlBaEIsRUFBQUEsR0FBRyxDQUFDWSxJQUFKLENBQVMsR0FBVCxFQUFjNkIsSUFBSSxDQUFDQyxTQUFMLENBQWVOLFNBQWYsQ0FBZDtBQUNELENBbkVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZW1haWxzIGZyb20gJy4uLy4uL2VtYWlsL2VtYWlsJztcbmltcG9ydCBsb2dnaW5nIGZyb20gJy4uLy4uL2xvZ2dpbmcnO1xuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi9maXJlc3RvcmUnO1xuXG5leHBvcnRzLmFkZEV2ZW50ID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IGV2ZW50c1JlZiA9IGRiLmNvbGxlY3Rpb24oJ2V2ZW50cycpO1xuICBjb25zdCB3b3Jrc3BhY2VSZWYgPSBkYi5jb2xsZWN0aW9uKCd3b3Jrc3BhY2UnKTtcbiAgY29uc3QgYWN0aXZpdHlSZWYgPSBkYi5jb2xsZWN0aW9uKCdhY3Rpdml0eScpO1xuICBjb25zdCB1c2Vyc1JlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJyk7XG5cbiAgY29uc3QgZXZlbnRJZCA9IHJlcS5wYXJhbXMuZXZlbnRJZC52YWx1ZTtcbiAgbG9nZ2luZy5pbmZvKCdSZWNlaXZlZCBldmVudCBpZCcsIGV2ZW50SWQpO1xuICBpZiAoIWV2ZW50SWQpIHtcbiAgICByZXR1cm4gcmVzLnNlbmQoNDA0KTtcbiAgfVxuXG4gIC8vIGdldCB0aGUgZXZlbnQgdHlwZVxuICBjb25zdCBldmVudERvYyA9IGF3YWl0IGV2ZW50c1JlZi5kb2MoZXZlbnRJZCkuZ2V0KCk7XG4gIGNvbnN0IGV2ZW50ID0gZXZlbnREb2MuZGF0YSgpO1xuICBsb2dnaW5nLmluZm8oJ0NoZWNraW5nIGV2ZW50JywgZXZlbnQpO1xuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgd29ya3NwYWNlIGlkXG4gIGlmICghZXZlbnQubWV0YS53b3Jrc3BhY2VJZCkge1xuICAgIHJldHVybiByZXMuc2VuZCg0MDQpO1xuICB9XG5cbiAgLy8gMi4gR2V0IGFsbCB0aGUgdXNlcnMgYXNzb2NpYXRlZCB3aXRoIHRoZSB3b3Jrc3BhY2VcbiAgY29uc3Qgd29ya3NwYWNlRG9jID0gYXdhaXQgd29ya3NwYWNlUmVmLmRvYyhldmVudC5tZXRhLndvcmtzcGFjZUlkKS5nZXQoKTtcbiAgY29uc3Qgd29ya3NwYWNlID0gd29ya3NwYWNlRG9jLmRhdGEoKTtcbiAgY29uc3QgdXNlcklkcyA9IE9iamVjdC5rZXlzKHdvcmtzcGFjZS51c2VycykuZmlsdGVyKFxuICAgIHVzZXJJZCA9PiB1c2VySWQgIT09IGV2ZW50Lm1ldGEudXNlcklkXG4gICk7XG5cbiAgLy8gMy4gRmlsdGVyIHVzZXJzIHdobyBoYXZlbid0IHZpZXcgYW4gZXZlbnRcbiAgY29uc3QgdW5zZWVuSWRMaXN0ID0gKGF3YWl0IFByb21pc2UuYWxsKFxuICAgIHVzZXJJZHMubWFwKGFzeW5jIHVzZXJJZCA9PiB7XG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgYWN0aXZpdHlSZWZcbiAgICAgICAgLmRvYyh1c2VySWQpXG4gICAgICAgIC5jb2xsZWN0aW9uKCdzZWVuJylcbiAgICAgICAgLmRvYyhldmVudERvYy5pZClcbiAgICAgICAgLmdldCgpO1xuXG4gICAgICAvLyBpZiB3ZSBoYXZlIHZpZXdlZCBpdCwgdGhlcmUgd2lsbCBiZSBhIHJlY29yZFxuICAgICAgLy8gd2Ugd25hbnQgdGhlIGludmVyc2UsIHdoZXJlIHNlZW4gcmVjb3JkcyBkb250IGV4aXN0c1xuICAgICAgcmV0dXJuIHVzZXIuZXhpc3RzID8gbnVsbCA6IHVzZXJJZDtcbiAgICB9KVxuICApKS5maWx0ZXIoeCA9PiB4ICE9IG51bGwpO1xuXG4gIC8vIDQuIGNvbnZlcnQgdG8gYW4gZW1haWwgbGlzdFxuICBjb25zdCBlbWFpbExpc3QgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICB1bnNlZW5JZExpc3QubWFwKGFzeW5jIGlkID0+IHtcbiAgICAgIGNvbnN0IHVzZXJEb2MgPSBhd2FpdCB1c2Vyc1JlZi5kb2MoaWQpLmdldCgpO1xuICAgICAgY29uc3QgdXNlciA9IHVzZXJEb2MuZGF0YSgpO1xuICAgICAgcmV0dXJuIHVzZXIuZW1haWw7XG4gICAgfSlcbiAgKTtcblxuICAvLyA1LiBTZW5kIHRoZXNlIGZvbGtzIGFuIGVtYWlsXG4gIGF3YWl0IFByb21pc2UuYWxsKFxuICAgIGVtYWlsTGlzdC5tYXAoYXN5bmMgZW1haWwgPT4ge1xuICAgICAgbG9nZ2luZy5pbmZvKFxuICAgICAgICAnU2VuZGluZyBub3RpZmljYXRpb24gdG8gZW1haWwnLFxuICAgICAgICBlbWFpbCxcbiAgICAgICAgJ2ZvciBldmVudElkJyxcbiAgICAgICAgZXZlbnREb2MuaWRcbiAgICAgICk7XG4gICAgICByZXR1cm4gZW1haWxzLm5ld0NvbW1lbnQoZW1haWwsIGV2ZW50KTtcbiAgICB9KVxuICApO1xuXG4gIHJlcy5zZW5kKDIwMCwgSlNPTi5zdHJpbmdpZnkoZW1haWxMaXN0KSk7XG59O1xuIl19