"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require(".");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const updateEventsForWorkspaceId = async (workspaceId, userId) => {
  if (_lodash.default.isNil(userId) && _lodash.default.isNil(workspaceId)) {
    return Promise.reject(new Error('Invalid user record'));
  } // 1. check if this user exists


  const userDocRef = await _2.db.collection('users').doc(userId).get();

  if (!userDocRef.exists) {
    return Promise.reject(new Error(`User ${userId} not found`));
  } // 2. Verify that user belongs to workspace


  const workspaceDocRef = await _2.db.collection('workspace').doc(workspaceId).get();

  if (!workspaceDocRef.exists) {
    return Promise.reject(new Error(`Workspace ${workspaceId} not found`));
  }

  const workspace = workspaceDocRef.data();

  if (!_lodash.default.has(workspace.users, userId)) {
    return Promise.reject(new Error(`User ${userId} is not associated with ${workspaceId}`));
  } // 3. upgrade all events for this user where there is
  // no workspaceid (saved against just userid account)


  const eventsQuerySnapshot = await _2.db.collection('events').where('meta.userId', '==', userId).get();
  let upgradedEvents = 0;
  eventsQuerySnapshot.forEach(async doc => {
    const event = doc.data();

    if (!event.meta.workspaceId) {
      upgradedEvents++;
      event.meta.workspaceId = workspaceId;
      await doc.ref.update(event);
    }
  });
  return upgradedEvents;
};

var _default = {
  updateEventsForWorkspaceId
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maXJlc3RvcmUvd29ya3NwYWNlLmpzIl0sIm5hbWVzIjpbInVwZGF0ZUV2ZW50c0ZvcldvcmtzcGFjZUlkIiwid29ya3NwYWNlSWQiLCJ1c2VySWQiLCJfIiwiaXNOaWwiLCJQcm9taXNlIiwicmVqZWN0IiwiRXJyb3IiLCJ1c2VyRG9jUmVmIiwiZGIiLCJjb2xsZWN0aW9uIiwiZG9jIiwiZ2V0IiwiZXhpc3RzIiwid29ya3NwYWNlRG9jUmVmIiwid29ya3NwYWNlIiwiZGF0YSIsImhhcyIsInVzZXJzIiwiZXZlbnRzUXVlcnlTbmFwc2hvdCIsIndoZXJlIiwidXBncmFkZWRFdmVudHMiLCJmb3JFYWNoIiwiZXZlbnQiLCJtZXRhIiwicmVmIiwidXBkYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSwwQkFBMEIsR0FBRyxPQUFPQyxXQUFQLEVBQW9CQyxNQUFwQixLQUErQjtBQUNoRSxNQUFJQyxnQkFBRUMsS0FBRixDQUFRRixNQUFSLEtBQW1CQyxnQkFBRUMsS0FBRixDQUFRSCxXQUFSLENBQXZCLEVBQTZDO0FBQzNDLFdBQU9JLE9BQU8sQ0FBQ0MsTUFBUixDQUFlLElBQUlDLEtBQUosQ0FBVSxxQkFBVixDQUFmLENBQVA7QUFDRCxHQUgrRCxDQUtoRTs7O0FBQ0EsUUFBTUMsVUFBVSxHQUFHLE1BQU1DLE1BQ3RCQyxVQURzQixDQUNYLE9BRFcsRUFFdEJDLEdBRnNCLENBRWxCVCxNQUZrQixFQUd0QlUsR0FIc0IsRUFBekI7O0FBS0EsTUFBSSxDQUFDSixVQUFVLENBQUNLLE1BQWhCLEVBQXdCO0FBQ3RCLFdBQU9SLE9BQU8sQ0FBQ0MsTUFBUixDQUFlLElBQUlDLEtBQUosQ0FBVyxRQUFPTCxNQUFPLFlBQXpCLENBQWYsQ0FBUDtBQUNELEdBYitELENBZWhFOzs7QUFDQSxRQUFNWSxlQUFlLEdBQUcsTUFBTUwsTUFDM0JDLFVBRDJCLENBQ2hCLFdBRGdCLEVBRTNCQyxHQUYyQixDQUV2QlYsV0FGdUIsRUFHM0JXLEdBSDJCLEVBQTlCOztBQUtBLE1BQUksQ0FBQ0UsZUFBZSxDQUFDRCxNQUFyQixFQUE2QjtBQUMzQixXQUFPUixPQUFPLENBQUNDLE1BQVIsQ0FBZSxJQUFJQyxLQUFKLENBQVcsYUFBWU4sV0FBWSxZQUFuQyxDQUFmLENBQVA7QUFDRDs7QUFFRCxRQUFNYyxTQUFTLEdBQUdELGVBQWUsQ0FBQ0UsSUFBaEIsRUFBbEI7O0FBQ0EsTUFBSSxDQUFDYixnQkFBRWMsR0FBRixDQUFNRixTQUFTLENBQUNHLEtBQWhCLEVBQXVCaEIsTUFBdkIsQ0FBTCxFQUFxQztBQUNuQyxXQUFPRyxPQUFPLENBQUNDLE1BQVIsQ0FDTCxJQUFJQyxLQUFKLENBQVcsUUFBT0wsTUFBTywyQkFBMEJELFdBQVksRUFBL0QsQ0FESyxDQUFQO0FBR0QsR0E5QitELENBZ0NoRTtBQUNBOzs7QUFDQSxRQUFNa0IsbUJBQW1CLEdBQUcsTUFBTVYsTUFDL0JDLFVBRCtCLENBQ3BCLFFBRG9CLEVBRS9CVSxLQUYrQixDQUV6QixhQUZ5QixFQUVWLElBRlUsRUFFSmxCLE1BRkksRUFHL0JVLEdBSCtCLEVBQWxDO0FBS0EsTUFBSVMsY0FBYyxHQUFHLENBQXJCO0FBQ0FGLEVBQUFBLG1CQUFtQixDQUFDRyxPQUFwQixDQUE0QixNQUFNWCxHQUFOLElBQWE7QUFDdkMsVUFBTVksS0FBSyxHQUFHWixHQUFHLENBQUNLLElBQUosRUFBZDs7QUFDQSxRQUFJLENBQUNPLEtBQUssQ0FBQ0MsSUFBTixDQUFXdkIsV0FBaEIsRUFBNkI7QUFDM0JvQixNQUFBQSxjQUFjO0FBQ2RFLE1BQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXdkIsV0FBWCxHQUF5QkEsV0FBekI7QUFDQSxZQUFNVSxHQUFHLENBQUNjLEdBQUosQ0FBUUMsTUFBUixDQUFlSCxLQUFmLENBQU47QUFDRDtBQUNGLEdBUEQ7QUFTQSxTQUFPRixjQUFQO0FBQ0QsQ0FsREQ7O2VBb0RlO0FBQ2JyQixFQUFBQTtBQURhLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZGIgfSBmcm9tIFwiLlwiO1xuXG5jb25zdCB1cGRhdGVFdmVudHNGb3JXb3Jrc3BhY2VJZCA9IGFzeW5jICh3b3Jrc3BhY2VJZCwgdXNlcklkKSA9PiB7XG4gIGlmIChfLmlzTmlsKHVzZXJJZCkgJiYgXy5pc05pbCh3b3Jrc3BhY2VJZCkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIHVzZXIgcmVjb3JkJykpO1xuICB9XG5cbiAgLy8gMS4gY2hlY2sgaWYgdGhpcyB1c2VyIGV4aXN0c1xuICBjb25zdCB1c2VyRG9jUmVmID0gYXdhaXQgZGJcbiAgICAuY29sbGVjdGlvbigndXNlcnMnKVxuICAgIC5kb2ModXNlcklkKVxuICAgIC5nZXQoKTtcblxuICBpZiAoIXVzZXJEb2NSZWYuZXhpc3RzKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgVXNlciAke3VzZXJJZH0gbm90IGZvdW5kYCkpO1xuICB9XG5cbiAgLy8gMi4gVmVyaWZ5IHRoYXQgdXNlciBiZWxvbmdzIHRvIHdvcmtzcGFjZVxuICBjb25zdCB3b3Jrc3BhY2VEb2NSZWYgPSBhd2FpdCBkYlxuICAgIC5jb2xsZWN0aW9uKCd3b3Jrc3BhY2UnKVxuICAgIC5kb2Mod29ya3NwYWNlSWQpXG4gICAgLmdldCgpO1xuXG4gIGlmICghd29ya3NwYWNlRG9jUmVmLmV4aXN0cykge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYFdvcmtzcGFjZSAke3dvcmtzcGFjZUlkfSBub3QgZm91bmRgKSk7XG4gIH1cblxuICBjb25zdCB3b3Jrc3BhY2UgPSB3b3Jrc3BhY2VEb2NSZWYuZGF0YSgpO1xuICBpZiAoIV8uaGFzKHdvcmtzcGFjZS51c2VycywgdXNlcklkKSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBFcnJvcihgVXNlciAke3VzZXJJZH0gaXMgbm90IGFzc29jaWF0ZWQgd2l0aCAke3dvcmtzcGFjZUlkfWApXG4gICAgKTtcbiAgfVxuXG4gIC8vIDMuIHVwZ3JhZGUgYWxsIGV2ZW50cyBmb3IgdGhpcyB1c2VyIHdoZXJlIHRoZXJlIGlzXG4gIC8vIG5vIHdvcmtzcGFjZWlkIChzYXZlZCBhZ2FpbnN0IGp1c3QgdXNlcmlkIGFjY291bnQpXG4gIGNvbnN0IGV2ZW50c1F1ZXJ5U25hcHNob3QgPSBhd2FpdCBkYlxuICAgIC5jb2xsZWN0aW9uKCdldmVudHMnKVxuICAgIC53aGVyZSgnbWV0YS51c2VySWQnLCAnPT0nLCB1c2VySWQpXG4gICAgLmdldCgpO1xuXG4gIGxldCB1cGdyYWRlZEV2ZW50cyA9IDA7XG4gIGV2ZW50c1F1ZXJ5U25hcHNob3QuZm9yRWFjaChhc3luYyBkb2MgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0gZG9jLmRhdGEoKTtcbiAgICBpZiAoIWV2ZW50Lm1ldGEud29ya3NwYWNlSWQpIHtcbiAgICAgIHVwZ3JhZGVkRXZlbnRzKys7XG4gICAgICBldmVudC5tZXRhLndvcmtzcGFjZUlkID0gd29ya3NwYWNlSWQ7XG4gICAgICBhd2FpdCBkb2MucmVmLnVwZGF0ZShldmVudCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdXBncmFkZWRFdmVudHM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHVwZGF0ZUV2ZW50c0ZvcldvcmtzcGFjZUlkXG59O1xuIl19