{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./content/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;ACnEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,0CAA0C;AACjD;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,OAAO,yCAAyC;AAChD;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA","file":"contentScript.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./content/index.js\");\n","/**\n * @param {*} scriptName\n * @param {*} scriptId\n */\nconst addScriptToPage = async (scriptName, scriptId) => {\n  return new Promise((resolve, reject) => {\n    // only add the scripts if they aren't already on the page\n    const elm = document.querySelector(`#${scriptId}`);\n    if (elm) {\n      return resolve();\n    }\n\n    // Add our page bridge\n    const script = document.createElement(\"script\");\n    script.src = chrome.runtime.getURL(scriptName);\n    script.onload = () => {\n      resolve();\n    };\n    script.onerror = reject;\n    script.id = scriptId;\n    document.body.appendChild(script);\n    document.body.insertAdjacentHTML(\"beforeend\", `<df-app />`);\n  });\n};\n\n/**\n * Configure our messaging\n */\nwindow.addEventListener(\n  \"message\",\n  evt => {\n    const data = evt.data;\n    if (data.source && data.source === \"@diff\") {\n      console.log(data);\n    }\n  },\n  false\n);\n\n/**\n *\n */\nconst loadScripts = async () => {\n  await addScriptToPage(\"frontend.js\", \"df-bridge-0123\");\n};\n\nconst getDomainsList = async () => {\n  return new Promise((resolve, reject) => {\n    chrome.runtime.sendMessage(\n      { type: \"GET_DOMAIN_LIST\", source: \"diff\" },\n      response => {\n        resolve(response);\n      }\n    );\n  });\n};\n\nconst getUserToken = async () => {\n  return new Promise((resolve, reject) => {\n    chrome.runtime.sendMessage(\n      { type: \"GET_AUTH_TOKEN\", source: \"diff\" },\n      response => {\n        resolve(response);\n      }\n    );\n  });\n};\n\nconst isWhitelistedDomain = domains => {\n  return !!domains.find(x => x === window.location.hostname);\n};\n\n/**\n * Configure our script to startup\n */\nconst startup = async () => {\n  try {\n    // check if we are still authenticated\n    const userToken = await getUserToken();\n\n    // check if we can run on this domain\n    const domains = await getDomainsList();\n\n    // domain type\n    if (isWhitelistedDomain(domains)) {\n      loadScripts();\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// start our applicaiton\nstartup();\n"],"sourceRoot":""}